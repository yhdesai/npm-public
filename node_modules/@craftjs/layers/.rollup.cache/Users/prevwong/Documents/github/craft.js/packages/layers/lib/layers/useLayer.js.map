{"version":3,"file":"useLayer.js","sourceRoot":"","sources":["../../src/layers/useLayer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAG9C,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAc7C,MAAM,UAAU,QAAQ,CAAW,OAA6B;IAC9D,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;IAE3D,MAAM,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,SAAS,EAAE,GAAG,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1E,OAAO,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAChD,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE;KAC1D,CAAC,CAAC,CAAC;IAEJ,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;QAC3B,OAAO;YACL,WAAW,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC;SAClD,CAAC;IACJ,CAAC,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IAEzB,OAAO;QACL,EAAE;QACF,KAAK;QACL,QAAQ;QACR,OAAO;QACP,UAAU;QACV,GAAI,SAAiB;KACtB,CAAC;AACJ,CAAC","sourcesContent":["import { useEditor } from '@craftjs/core';\nimport { useContext, useMemo } from 'react';\n\nimport { LayerContext } from './LayerContext';\n\nimport { Layer } from '../interfaces';\nimport { useLayerManager } from '../manager';\n\ntype internalActions = LayerContext & {\n  children: string[];\n  actions: {\n    toggleLayer: () => void;\n  };\n};\n\nexport type useLayer<S = null> = S extends null\n  ? internalActions\n  : S & internalActions;\nexport function useLayer(): useLayer;\nexport function useLayer<S = null>(collect?: (node: Layer) => S): useLayer<S>;\nexport function useLayer<S = null>(collect?: (layer: Layer) => S): useLayer<S> {\n  const { id, depth, connectors } = useContext(LayerContext);\n\n  const { actions: managerActions, ...collected } = useLayerManager((state) => {\n    return id && state.layers[id] && collect && collect(state.layers[id]);\n  });\n\n  const { children } = useEditor((state, query) => ({\n    children: state.nodes[id] && query.node(id).descendants(),\n  }));\n\n  const actions = useMemo(() => {\n    return {\n      toggleLayer: () => managerActions.toggleLayer(id),\n    };\n  }, [managerActions, id]);\n\n  return {\n    id,\n    depth,\n    children,\n    actions,\n    connectors,\n    ...(collected as any),\n  };\n}\n"]}