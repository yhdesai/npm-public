{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../src/manager/actions.tsx"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAiB,EAAE,EAAE,CAAC,CAAC;IAClD,aAAa,EAAE,CAAC,SAAsB,EAAE,EAAU,EAAE,EAAE;QACpD,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YAAE,OAAO;QAE7C,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,OAAO,IAAI,EAAE,KAAK,OAAO,EAAE;YAC7B,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;SAChD;QAED,IAAI,EAAE,EAAE;YACN,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YACzC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SAC9B;aAAM;YACL,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;SAChC;IACH,CAAC;IACD,aAAa,EAAE,CAAC,EAAU,EAAE,EAAE;QAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YACrB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG;gBACjB,GAAG,EAAE,IAAI;gBACT,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,KAAK;gBACf,EAAE;gBACF,KAAK,EAAE;oBACL,QAAQ,EAAE,KAAK;oBACf,OAAO,EAAE,KAAK;iBACf;aACF,CAAC;SACH;IACH,CAAC;IACD,MAAM,EAAE,CACN,EAAU,EACV,aAAiE,EACjE,EAAE;QACF,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG;YACjB,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YACnB,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACxD,GAAG,CAAC,aAAa,CAAC,UAAU;gBAC1B,CAAC,CAAC,EAAE,UAAU,EAAE,aAAa,CAAC,UAAU,EAAE;gBAC1C,CAAC,CAAC,EAAE,CAAC;SACR,CAAC;IACJ,CAAC;IACD,WAAW,EAAE,CAAC,EAAU,EAAE,EAAE;QAC1B,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;IACzD,CAAC;IACD,YAAY,EAAE,CAAC,SAAS,EAAE,EAAE;QAC1B,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;IACrC,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { LayerState, LayerEvents } from '../interfaces';\n\nexport const LayerMethods = (state: LayerState) => ({\n  setLayerEvent: (eventType: LayerEvents, id: string) => {\n    if (id !== null && !state.layers[id]) return;\n\n    const current = state.events[eventType];\n    if (current && id !== current) {\n      state.layers[current].event[eventType] = false;\n    }\n\n    if (id) {\n      state.layers[id].event[eventType] = true;\n      state.events[eventType] = id;\n    } else {\n      state.events[eventType] = null;\n    }\n  },\n  registerLayer: (id: string) => {\n    if (!state.layers[id]) {\n      state.layers[id] = {\n        dom: null,\n        headingDom: null,\n        expanded: false,\n        id,\n        event: {\n          selected: false,\n          hovered: false,\n        },\n      };\n    }\n  },\n  setDOM: (\n    id: string,\n    domCollection: Partial<Record<'dom' | 'headingDom', HTMLElement>>\n  ) => {\n    state.layers[id] = {\n      ...state.layers[id],\n      ...(domCollection.dom ? { dom: domCollection.dom } : {}),\n      ...(domCollection.headingDom\n        ? { headingDom: domCollection.headingDom }\n        : {}),\n    };\n  },\n  toggleLayer: (id: string) => {\n    state.layers[id].expanded = !state.layers[id].expanded;\n  },\n  setIndicator: (indicator) => {\n    state.events.indicator = indicator;\n  },\n});\n"]}