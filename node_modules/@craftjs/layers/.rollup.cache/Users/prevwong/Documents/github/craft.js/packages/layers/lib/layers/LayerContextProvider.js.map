{"version":3,"file":"LayerContextProvider.js","sourceRoot":"","sources":["../../src/layers/LayerContextProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE3D,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AAEjD,MAAM,CAAC,MAAM,oBAAoB,GAG5B,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;IACrB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;KAC1B,CAAC,CAAC,CAAC;IAEJ,MAAM,iBAAiB,GAAG,WAAW,CAAC,QAAQ,CAAC;IAE/C,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;IAEzB,MAAM,QAAQ,GAAG,OAAO,CACtB,GAAG,EAAE,CACH,iBAAiB,CAAC,MAAM,CAAC,aAAa,EAAE;QACtC,UAAU,EAAE,QAAQ,CAAC,OAAO;QAC5B,OAAO,EAAE,EAAE;KACZ,CAAC,EACJ,CAAC,iBAAiB,EAAE,EAAE,CAAC,CACxB,CAAC;IAEF,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;QACxE,QAAQ;KACT,CAAC,CAAC;IAEH,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE;QACrD,oBAAC,SAAS,OAAG,CACS,CACzB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useEditor } from '@craftjs/core';\nimport { wrapConnectorHooks } from '@craftjs/utils';\nimport React, { useMemo, useContext, useRef } from 'react';\n\nimport { LayerContext } from './LayerContext';\nimport { LayerNode } from './LayerNode';\n\nimport { LayerHandlers } from '../events/LayerHandlers';\nimport { LayerManagerContext } from '../manager';\n\nexport const LayerContextProvider: React.FC<Omit<\n  LayerContext,\n  'connectors'\n>> = ({ id, depth }) => {\n  const { exists, store: editorStore } = useEditor((state) => ({\n    exists: !!state.nodes[id],\n  }));\n\n  const coreEventHandlers = editorStore.handlers;\n\n  const { store } = useContext(LayerManagerContext);\n  const storeRef = useRef(store);\n  storeRef.current = store;\n\n  const handlers = useMemo(\n    () =>\n      coreEventHandlers.derive(LayerHandlers, {\n        layerStore: storeRef.current,\n        layerId: id,\n      }),\n    [coreEventHandlers, id]\n  );\n\n  const connectors = useMemo(() => wrapConnectorHooks(handlers.connectors), [\n    handlers,\n  ]);\n\n  if (!exists) {\n    return null;\n  }\n\n  return (\n    <LayerContext.Provider value={{ id, depth, connectors }}>\n      <LayerNode />\n    </LayerContext.Provider>\n  );\n};\n"]}