import { Node, NodeEventTypes, NodeId } from '../interfaces';
import { EditorStoreConfig, EditorStoreImpl } from '../store';
declare type NestedNode = Omit<Node, 'nodes' | 'linkedNodes' | 'parent'> & {
    nodes: NestedNode[];
    linkedNodes: Record<NodeId, NestedNode>;
};
declare type PartialNestedNode = Partial<Omit<NestedNode, 'nodes' | 'linkedNodes'> & {
    nodes: PartialNestedNode[];
    linkedNodes: Record<NodeId, PartialNestedNode>;
}>;
export declare const createTestNodes: (node: Partial<Pick<NestedNode, "type" | "props" | "displayName" | "isCanvas" | "hidden" | "custom" | "id"> & {
    nodes: Partial<Pick<NestedNode, "type" | "props" | "displayName" | "isCanvas" | "hidden" | "custom" | "id"> & any>[];
    linkedNodes: Record<string, Partial<Pick<NestedNode, "type" | "props" | "displayName" | "isCanvas" | "hidden" | "custom" | "id"> & any>>;
}>) => Record<string, Node>;
declare type TestEditorState = {
    nodes: PartialNestedNode;
    events: Record<NodeEventTypes, NodeId[]>;
};
export declare const createTestState: (state?: Partial<TestEditorState>) => {
    nodes: Record<string, Node>;
    events: {
        selected: Set<string>;
        dragged: Set<string>;
        hovered: Set<string>;
    };
    enabled: boolean;
    indicator: import("../interfaces").Indicator;
    timestamp: number;
};
export declare const createTestEditorStore: (config: Partial<EditorStoreConfig & {
    state: Partial<TestEditorState>;
}>) => EditorStoreImpl;
export {};
