{"version":3,"file":"nodes.js","sourceRoot":"","sources":["../../../src/interfaces/legacy/nodes.ts"],"names":[],"mappings":"","sourcesContent":["import { NodeEventTypes, NodeRelated, NodeRules } from '..';\nimport { NodeId } from '../nodes';\n\nexport type LegacyNodeData = {\n  props: Record<string, any>;\n  type: string | React.ElementType;\n  name: string;\n  displayName: string;\n  isCanvas: boolean;\n  parent: NodeId;\n  linkedNodes: Record<string, NodeId>;\n  nodes: NodeId[];\n  hidden: boolean;\n  custom?: any;\n  _childCanvas?: Record<string, NodeId>; // TODO: Deprecate in favour of linkedNodes\n};\n\nexport type LegacyNode = {\n  id: NodeId;\n  data: LegacyNodeData;\n  rules: NodeRules;\n  events: Record<NodeEventTypes, boolean>;\n  related: NodeRelated;\n  dom: HTMLElement;\n};\n\nexport type LegacyNodes = Record<NodeId, LegacyNode>;\n\nexport type LegacyNodeTree = {\n  rootNodeId: NodeId;\n  nodes: LegacyNodes;\n};\n\nexport interface LegacyNodeQuery extends LegacyNode {\n  get: () => LegacyNode;\n  toSerializedNode: () => SerializedNode;\n}\n\nexport type FreshNode = {\n  id?: NodeId;\n  data: Partial<LegacyNodeData> & Required<Pick<LegacyNodeData, 'type'>>;\n};\n\nexport type ReduceCompType =\n  | string\n  | {\n      resolvedName: string;\n    };\n\nexport type ReducedComp = {\n  type: ReduceCompType;\n  isCanvas: boolean;\n  props: any;\n};\n\nexport type SerializedNode = Omit<LegacyNodeData, 'type' | 'name' | 'event'> &\n  ReducedComp;\n\nexport type SerializedNodes = Record<NodeId, SerializedNode>;\n"]}