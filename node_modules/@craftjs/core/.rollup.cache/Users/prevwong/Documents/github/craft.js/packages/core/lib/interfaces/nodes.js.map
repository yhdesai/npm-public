{"version":3,"file":"nodes.js","sourceRoot":"","sources":["../../src/interfaces/nodes.ts"],"names":[],"mappings":"AAyEA,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,qDAAG,CAAA;IACH,mDAAE,CAAA;IACF,qDAAG,CAAA;AACL,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B","sourcesContent":["import React from 'react';\n\nimport { LegacyNode, LegacyNodeQuery } from './legacy/nodes';\n\nexport type UserComponentConfig<T> = {\n  displayName: string;\n  rules: Partial<NodeRules>;\n  related: Partial<NodeRelated>;\n  props: Partial<T>;\n  custom: Record<string, any>;\n  isCanvas: boolean;\n};\n\nexport type UserComponent<T = any> = React.ComponentType<T> & {\n  craft?: Partial<UserComponentConfig<T>>;\n};\n\nexport type NodeId = string;\nexport type NodeEventTypes = 'selected' | 'dragged' | 'hovered';\n\nexport type Node = {\n  id: NodeId;\n  type: string;\n  props: Record<string, any>;\n  displayName: string;\n  isCanvas: boolean;\n  parent: NodeId;\n  linkedNodes: Record<string, NodeId>;\n  nodes: NodeId[];\n  hidden: boolean;\n  custom?: any;\n};\n\nexport type BackwardsCompatibleNode = Node & LegacyNode;\n\nexport type NodeHelpersType = (id: NodeId) => LegacyNodeQuery;\nexport type NodeRules = {\n  canDrag(node: BackwardsCompatibleNode, helpers: NodeHelpersType): boolean;\n  canDrop(\n    dropTarget: BackwardsCompatibleNode,\n    self: BackwardsCompatibleNode,\n    helpers: NodeHelpersType\n  ): boolean;\n  canMoveIn(\n    canMoveIn: BackwardsCompatibleNode[],\n    self: BackwardsCompatibleNode,\n    helpers: NodeHelpersType\n  ): boolean;\n  canMoveOut(\n    canMoveOut: BackwardsCompatibleNode[],\n    self: BackwardsCompatibleNode,\n    helpers: NodeHelpersType\n  ): boolean;\n};\nexport type NodeRelated = Record<string, React.ElementType>;\n\nexport type Nodes = Record<NodeId, Node>;\n\n/**\n * A NodeTree is an internal data structure for CRUD operations that involve\n * more than a single node.\n *\n * For example, when we drop a component we use a tree because we\n * need to drop more than a single component.\n */\nexport interface NodeTree {\n  rootNodeId: NodeId;\n  nodes: Nodes;\n}\n\ntype NodeIdSelector = NodeId | NodeId[];\ntype NodeObjSelector = Node | Node[];\n\nexport enum NodeSelectorType {\n  Any,\n  Id,\n  Obj,\n}\n\nexport type NodeSelector<\n  T extends NodeSelectorType = NodeSelectorType.Any\n> = T extends NodeSelectorType.Id\n  ? NodeIdSelector\n  : T extends NodeSelectorType.Obj\n  ? NodeObjSelector\n  : NodeIdSelector | NodeObjSelector;\n\nexport type NodeSelectorWrapper = {\n  node: Node;\n  exists: boolean;\n};\n"]}