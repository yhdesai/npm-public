{"version":3,"file":"findPosition.js","sourceRoot":"","sources":["../../src/events/findPosition.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,MAAc,EACd,IAAgB,EAChB,IAAY,EACZ,IAAY;IAEZ,IAAI,MAAM,GAAe;QACvB,MAAM;QACN,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,QAAQ;KAChB,CAAC;IAEF,IAAI,SAAS,GAAG,CAAC,EACf,MAAM,GAAG,CAAC,EACV,QAAQ,GAAG,CAAC,EACZ,MAAM,GAAG,CAAC,EACV,OAAO,GAAG,CAAC,EACX,OAAO,GAAG,CAAC,EACX,OAAO,GAAG,CAAC,CAAC;IAEd,wCAAwC;IACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC/C,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpB,8CAA8C;QAC9C,QAAQ,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC;QACrC,+CAA+C;QAC/C,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC;QACpC,uDAAuD;QACvD,OAAO,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACxC,uDAAuD;QACvD,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC;QACxC,0BAA0B;QAC1B,IACE,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC;YAC7B,CAAC,MAAM,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,iCAAiC;YAClE,CAAC,SAAS,IAAI,QAAQ,GAAG,SAAS,CAAC;YAEnC,SAAS;QAEX,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;QACjB,6CAA6C;QAC7C,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACf,IAAI,IAAI,GAAG,OAAO;gBAAE,MAAM,GAAG,OAAO,CAAC;YACrC,yBAAyB;YACzB,IAAI,IAAI,GAAG,OAAO,EAAE;gBAClB,MAAM,GAAG,OAAO,CAAC;gBACjB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;aACzB;iBAAM;gBACL,SAAS,GAAG,OAAO,CAAC;gBACpB,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;aACxB;SACF;aAAM;YACL,yBAAyB;YACzB,IAAI,IAAI,GAAG,OAAO,EAAE;gBAClB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;gBACxB,MAAM;aACP;;gBAAM,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,qBAAqB;SACrD;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { NodeInfo, DropAction, NodeId } from '../interfaces';\n\nexport default function findPosition(\n  parent: NodeId,\n  dims: NodeInfo[],\n  posX: number,\n  posY: number\n) {\n  let result: DropAction = {\n    parent,\n    index: 0,\n    where: 'before',\n  };\n\n  let leftLimit = 0,\n    xLimit = 0,\n    dimRight = 0,\n    yLimit = 0,\n    xCenter = 0,\n    yCenter = 0,\n    dimDown = 0;\n\n  // Each dim is: Top, Left, Height, Width\n  for (let i = 0, len = dims.length; i < len; i++) {\n    const dim = dims[i];\n\n    // Right position of the element. Left + Width\n    dimRight = dim.left + dim.outerWidth;\n    // Bottom position of the element. Top + Height\n    dimDown = dim.top + dim.outerHeight;\n    // X center position of the element. Left + (Width / 2)\n    xCenter = dim.left + dim.outerWidth / 2;\n    // Y center position of the element. Top + (Height / 2)\n    yCenter = dim.top + dim.outerHeight / 2;\n    // Skip if over the limits\n    if (\n      (xLimit && dim.left > xLimit) ||\n      (yLimit && yCenter >= yLimit) || // >= avoid issue with clearfixes\n      (leftLimit && dimRight < leftLimit)\n    )\n      continue;\n\n    result.index = i;\n    // If it's not in flow (like 'float' element)\n    if (!dim.inFlow) {\n      if (posY < dimDown) yLimit = dimDown;\n      //If x lefter than center\n      if (posX < xCenter) {\n        xLimit = xCenter;\n        result.where = 'before';\n      } else {\n        leftLimit = xCenter;\n        result.where = 'after';\n      }\n    } else {\n      // If y upper than center\n      if (posY < yCenter) {\n        result.where = 'before';\n        break;\n      } else result.where = 'after'; // After last element\n    }\n  }\n\n  return result;\n}\n"]}