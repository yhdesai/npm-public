import { Store, History } from '@craftjs/utils';
import { EditorStore, EditorStoreConfig } from './EditorStore';
import { RelatedComponents } from './RelatedComponents';
import { EditorQuery } from './query';
import { CoreEventHandlers } from '../events/CoreEventHandlers';
import { EditorState, Resolver } from '../interfaces';
export declare const editorInitialState: EditorState;
export declare class EditorStoreImpl extends Store<EditorState> implements EditorStore {
    history: History;
    config: EditorStoreConfig;
    handlers: CoreEventHandlers;
    related: RelatedComponents;
    resolver: Resolver;
    constructor(config?: Partial<EditorStoreConfig & {
        state: Partial<EditorState>;
    }>);
    readonly actions: {
        history: {
            undo: () => void;
            redo: () => void;
            ignore: () => {
                addLinkedNodeFromTree(tree: import("../interfaces").NodeTree, parentId: string, id: string): void;
                add(nodeToAdd: import("../interfaces").LegacyNode | import("../interfaces").Node | import("../interfaces").Node[] | import("../interfaces").LegacyNode[], parentId: string, index?: number): void;
                addNodeTree(tree: import("../interfaces").NodeTree, parentId?: string, index?: number): void;
                delete(selector: string | string[]): void;
                move(selector: string | string[] | import("../interfaces").Node | import("../interfaces").Node[], newParentId: string, index: number): void;
                replaceNodes(nodes: Record<string, import("../interfaces").Node>): void;
                clearEvents(): void;
                reset(): void;
                setEnabled(enabled: boolean): void;
                setNodeEvent(eventType: import("../interfaces").NodeEventTypes, nodeIdSelector: string | string[]): void;
                setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
                setIndicator(indicator: import("../interfaces").Indicator): void;
                setHidden(id: string, bool: boolean): void;
                setProp(selector: string | string[], cb: (props: any) => void): void;
                selectNode(nodeIdSelector?: string | string[]): void;
                setOptions(cb: (options: Partial<import("../interfaces").LegacyStateOptions>) => void): void;
                deserialize(input: string | Record<string, import("../interfaces").SerializedNode>): void;
            };
            throttle: (rate?: number) => {
                addLinkedNodeFromTree(tree: import("../interfaces").NodeTree, parentId: string, id: string): void;
                add(nodeToAdd: import("../interfaces").LegacyNode | import("../interfaces").Node | import("../interfaces").Node[] | import("../interfaces").LegacyNode[], parentId: string, index?: number): void;
                addNodeTree(tree: import("../interfaces").NodeTree, parentId?: string, index?: number): void;
                delete(selector: string | string[]): void;
                move(selector: string | string[] | import("../interfaces").Node | import("../interfaces").Node[], newParentId: string, index: number): void;
                replaceNodes(nodes: Record<string, import("../interfaces").Node>): void;
                clearEvents(): void;
                reset(): void;
                setEnabled(enabled: boolean): void;
                setNodeEvent(eventType: import("../interfaces").NodeEventTypes, nodeIdSelector: string | string[]): void;
                setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
                setIndicator(indicator: import("../interfaces").Indicator): void;
                setHidden(id: string, bool: boolean): void;
                setProp(selector: string | string[], cb: (props: any) => void): void;
                selectNode(nodeIdSelector?: string | string[]): void;
                setOptions(cb: (options: Partial<import("../interfaces").LegacyStateOptions>) => void): void;
                deserialize(input: string | Record<string, import("../interfaces").SerializedNode>): void;
            };
            merge: () => {
                addLinkedNodeFromTree(tree: import("../interfaces").NodeTree, parentId: string, id: string): void;
                add(nodeToAdd: import("../interfaces").LegacyNode | import("../interfaces").Node | import("../interfaces").Node[] | import("../interfaces").LegacyNode[], parentId: string, index?: number): void;
                addNodeTree(tree: import("../interfaces").NodeTree, parentId?: string, index?: number): void;
                delete(selector: string | string[]): void;
                move(selector: string | string[] | import("../interfaces").Node | import("../interfaces").Node[], newParentId: string, index: number): void;
                replaceNodes(nodes: Record<string, import("../interfaces").Node>): void;
                clearEvents(): void;
                reset(): void;
                setEnabled(enabled: boolean): void;
                setNodeEvent(eventType: import("../interfaces").NodeEventTypes, nodeIdSelector: string | string[]): void;
                setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
                setIndicator(indicator: import("../interfaces").Indicator): void;
                setHidden(id: string, bool: boolean): void;
                setProp(selector: string | string[], cb: (props: any) => void): void;
                selectNode(nodeIdSelector?: string | string[]): void;
                setOptions(cb: (options: Partial<import("../interfaces").LegacyStateOptions>) => void): void;
                deserialize(input: string | Record<string, import("../interfaces").SerializedNode>): void;
            };
        };
        addLinkedNodeFromTree(tree: import("../interfaces").NodeTree, parentId: string, id: string): void;
        add(nodeToAdd: import("../interfaces").LegacyNode | import("../interfaces").Node | import("../interfaces").Node[] | import("../interfaces").LegacyNode[], parentId: string, index?: number): void;
        addNodeTree(tree: import("../interfaces").NodeTree, parentId?: string, index?: number): void;
        delete(selector: string | string[]): void;
        move(selector: string | string[] | import("../interfaces").Node | import("../interfaces").Node[], newParentId: string, index: number): void;
        replaceNodes(nodes: Record<string, import("../interfaces").Node>): void;
        clearEvents(): void;
        reset(): void;
        setEnabled(enabled: boolean): void;
        setNodeEvent(eventType: import("../interfaces").NodeEventTypes, nodeIdSelector: string | string[]): void;
        setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
        setIndicator(indicator: import("../interfaces").Indicator): void;
        setHidden(id: string, bool: boolean): void;
        setProp(selector: string | string[], cb: (props: any) => void): void;
        selectNode(nodeIdSelector?: string | string[]): void;
        setOptions(cb: (options: Partial<import("../interfaces").LegacyStateOptions>) => void): void;
        deserialize(input: string | Record<string, import("../interfaces").SerializedNode>): void;
    };
    readonly query: EditorQuery;
}
