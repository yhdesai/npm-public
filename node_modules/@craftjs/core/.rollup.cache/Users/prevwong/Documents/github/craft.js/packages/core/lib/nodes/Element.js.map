{"version":3,"file":"Element.js","sourceRoot":"","sources":["../../src/nodes/Element.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ERROR_TOP_LEVEL_ELEMENT_NO_ID, useEffectOnce } from '@craftjs/utils';\nimport React, { useState } from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { NodeElement } from './NodeElement';\nimport { useInternalNode } from './useInternalNode';\n\nimport { useInternalEditor } from '../editor/useInternalEditor';\nimport { NodeId } from '../interfaces';\nimport { ERROR_NOT_IN_RESOLVER } from '@craftjs/utils';\n\nimport { mergeTrees } from '../utils/mergeTrees';\nimport { resolveComponent } from '../utils/resolveComponent';\nimport { createNodeWithResolverConfig } from '../utils/types';\n\nimport { Node, NodeTree, Resolver } from '../interfaces';\n\nexport const defaultElementProps = {\n  is: 'div',\n  canvas: false,\n  custom: {},\n  hidden: false,\n};\n\nexport const elementPropToNodeData = {\n  is: 'type',\n  canvas: 'isCanvas',\n};\n\nexport type Element<T extends React.ElementType> = {\n  id?: NodeId;\n  is?: T;\n  custom?: Record<string, any>;\n  children?: React.ReactNode;\n  canvas?: boolean;\n} & React.ComponentProps<T>;\n\nexport function Element<T extends React.ElementType>({\n  id,\n  children,\n  ...elementProps\n}: Element<T>) {\n  const { is } = {\n    ...defaultElementProps,\n    ...elementProps,\n  };\n\n  const { query, actions } = useInternalEditor();\n  const { id: nodeId, linkedNodes, inNodeContext } = useInternalNode(\n    (node) => ({\n      linkedNodes: node.linkedNodes(),\n    })\n  );\n\n  const [linkedNodeId, setLinkedNodeId] = useState<NodeId | null>(null);\n\n  useEffectOnce(() => {\n    invariant(!!id, ERROR_TOP_LEVEL_ELEMENT_NO_ID);\n\n    if (inNodeContext) {\n      let linkedNodeId;\n\n      const existingNode =\n        linkedNodes && linkedNodes[id] && query.node(linkedNodes[id]).get();\n\n      // Render existing linked Node if it already exists (and is the same type as the JSX)\n      if (existingNode && existingNode.data.type === is) {\n        linkedNodeId = existingNode.id;\n      } else {\n        // otherwise, create and render a new linked Node\n        const linkedElement = React.createElement(\n          Element,\n          elementProps,\n          children\n        );\n\n        const tree = query.parseReactElement(linkedElement).toNodeTree();\n\n        linkedNodeId = tree.rootNodeId;\n        actions.history.ignore().addLinkedNodeFromTree(tree, nodeId, id);\n      }\n\n      setLinkedNodeId(linkedNodeId);\n    }\n  });\n\n  return linkedNodeId ? <NodeElement id={linkedNodeId} /> : null;\n}\n\nexport function parseNodeFromJSX(\n  element: React.ReactElement,\n  resolver: Resolver,\n  normalize?: any\n): NodeTree {\n  let { type: componentType, props: componentProps } = element;\n\n  const nodeConfig: Partial<Node> = {\n    type: 'div',\n    displayName: 'div',\n    props: {},\n    isCanvas: false,\n    hidden: false,\n    custom: {},\n  };\n\n  if (componentType === Element) {\n    const { is, canvas, custom, hidden, ...props } = {\n      ...defaultElementProps,\n      ...componentProps,\n    } as React.ComponentProps<typeof Element>;\n\n    componentType = is;\n    nodeConfig.isCanvas = canvas;\n    nodeConfig.custom = custom;\n    nodeConfig.hidden = hidden;\n    nodeConfig.props = {\n      ...nodeConfig.props,\n      ...props,\n    };\n  } else {\n    nodeConfig.props = componentProps;\n  }\n\n  nodeConfig.type = resolveComponent(resolver, componentType);\n  nodeConfig.displayName = nodeConfig.type;\n\n  invariant(nodeConfig.type, ERROR_NOT_IN_RESOLVER);\n\n  const node = createNodeWithResolverConfig(nodeConfig, resolver);\n\n  if (normalize) {\n    normalize(node, element);\n  }\n\n  let childrenNodes = [];\n\n  if (node.props.children) {\n    childrenNodes = React.Children.toArray(node.props.children).reduce<\n      NodeTree[]\n    >((accum, child: any) => {\n      if (React.isValidElement(child)) {\n        accum.push(parseNodeFromJSX(child, resolver));\n      }\n      return accum;\n    }, []);\n    if (childrenNodes.length > 0) {\n      delete node.props.children;\n    }\n  }\n\n  return mergeTrees(node, childrenNodes);\n}\n"]}