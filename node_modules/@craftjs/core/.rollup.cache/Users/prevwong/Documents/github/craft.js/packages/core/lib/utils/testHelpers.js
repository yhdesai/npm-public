import { EditorStoreImpl, editorInitialState, } from '../store';
import { getRandomNodeId } from '../utils/getRandomNodeId';
export const createTestNodes = (node) => {
    const flattenNodes = {};
    const flattenNode = (partialNode, parent = null) => {
        const node = {
            id: getRandomNodeId(),
            nodes: [],
            linkedNodes: {},
            props: {},
            custom: {},
            type: 'div',
            displayName: 'div',
            isCanvas: false,
            hidden: false,
            ...partialNode,
        };
        flattenNodes[node.id] = {
            ...node,
            parent,
            nodes: [],
            linkedNodes: {},
        };
        flattenNodes[node.id].nodes = node.nodes.map((childNode) => flattenNode(childNode, node.id));
        flattenNodes[node.id].linkedNodes = Object.entries(node.linkedNodes).reduce((accum, [id, linkedNode]) => ({
            ...accum,
            [id]: flattenNode(linkedNode, node.id),
        }), {});
        return node.id;
    };
    flattenNode(node);
    return flattenNodes;
};
export const createTestState = (state = {}) => {
    const { nodes: rootNode, events } = state;
    return {
        ...editorInitialState,
        ...state,
        nodes: rootNode ? createTestNodes(rootNode) : {},
        events: {
            ...editorInitialState.events,
            ...(!events
                ? {}
                : Object.entries(events).reduce((accum, [eventType, array]) => ({
                    ...accum,
                    [eventType]: new Set(array),
                }), {})),
        },
    };
};
export const createTestEditorStore = (config) => {
    const { state, ...otherConfig } = config;
    return new EditorStoreImpl({
        ...otherConfig,
        state: createTestState(state),
    });
};
//# sourceMappingURL=testHelpers.js.map