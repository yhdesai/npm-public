import { EditorStore } from './EditorStore';
import { EditorState, Indicator, Node, LegacyStateOptions, NodeEventTypes, NodeTree, LegacyNode } from '../interfaces';
export declare const ActionMethods: (state: EditorState, store: EditorStore) => {
    /**
     * @private
     * Add a new linked Node to the editor.
     * Only used internally by the <Element /> component
     *
     * @param tree
     * @param parentId
     * @param id
     */
    addLinkedNodeFromTree(tree: NodeTree, parentId: string, id: string): void;
    /**
     * Add a new Node to the editor.
     *
     * @param nodeToAdd
     * @param parentId
     * @param index
     */
    add(nodeToAdd: LegacyNode | Node | Node[] | LegacyNode[], parentId: string, index?: number): void;
    /**
     * Add a NodeTree to the editor
     *
     * @param tree
     * @param parentId
     * @param index
     */
    addNodeTree(tree: NodeTree, parentId?: string, index?: number): void;
    /**
     * Delete a Node
     * @param id
     */
    delete(selector: string | string[]): void;
    /**
     * Move a target Node to a new Parent at a given index
     * @param targetId
     * @param newParentId
     * @param index
     */
    move(selector: string | string[] | Node | Node[], newParentId: string, index: number): void;
    replaceNodes(nodes: Record<string, Node>): void;
    clearEvents(): void;
    /**
     * Resets all the editor state.
     */
    reset(): void;
    setEnabled(enabled: boolean): void;
    setNodeEvent(eventType: NodeEventTypes, nodeIdSelector: string | string[]): void;
    /**
     * Set custom values to a Node
     * @param id
     * @param cb
     */
    setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
    setIndicator(indicator: Indicator): void;
    /**
     * Hide a Node
     * @param id
     * @param bool
     */
    setHidden(id: string, bool: boolean): void;
    /**
     * Update the props of a Node
     * @param id
     * @param cb
     */
    setProp(selector: string | string[], cb: (props: any) => void): void;
    selectNode(nodeIdSelector?: string | string[]): void;
    /**
     * Set editor options via a callback function
     * @deprecated
     * @param cb: function used to set the options.
     */
    setOptions(cb: (options: Partial<LegacyStateOptions>) => void): void;
    /**
     * @deprecated
     * @param input
     */
    deserialize(input: string | Record<string, import("../interfaces").SerializedNode>): void;
};
