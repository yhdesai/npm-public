/// <reference types="react" />
import { EditorQuery } from '../store';
export declare type EditorCollector<C> = (state: EditorQuery, query: EditorQuery) => C;
export declare function useInternalEditor<C = null>(collector?: EditorCollector<C>): (C extends null ? {} : C) & {
    actions: {
        addLinkedNodeFromTree(tree: import("..").NodeTree, parentId: string, id: string): void;
        add(nodeToAdd: import("..").LegacyNode | import("..").Node | import("..").Node[] | import("..").LegacyNode[], parentId: string, index?: number): void;
        addNodeTree(tree: import("..").NodeTree, parentId?: string, index?: number): void;
        delete(selector: string | string[]): void;
        move(selector: string | string[] | import("..").Node | import("..").Node[], newParentId: string, index: number): void;
        replaceNodes(nodes: Record<string, import("..").Node>): void;
        clearEvents(): void;
        reset(): void;
        setEnabled(enabled: boolean): void;
        setNodeEvent(eventType: import("..").NodeEventTypes, nodeIdSelector: string | string[]): void;
        setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
        setIndicator(indicator: import("..").Indicator): void;
        setHidden(id: string, bool: boolean): void;
        setProp(selector: string | string[], cb: (props: any) => void): void;
        selectNode(nodeIdSelector?: string | string[]): void;
        setOptions(cb: (options: Partial<import("..").LegacyStateOptions>) => void): void;
        deserialize(input: string | Record<string, import("..").SerializedNode>): void;
    } & {
        history: {
            undo: () => void;
            redo: () => void;
            ignore: () => {
                addLinkedNodeFromTree(tree: import("..").NodeTree, parentId: string, id: string): void;
                add(nodeToAdd: import("..").LegacyNode | import("..").Node | import("..").Node[] | import("..").LegacyNode[], parentId: string, index?: number): void;
                addNodeTree(tree: import("..").NodeTree, parentId?: string, index?: number): void;
                delete(selector: string | string[]): void;
                move(selector: string | string[] | import("..").Node | import("..").Node[], newParentId: string, index: number): void;
                replaceNodes(nodes: Record<string, import("..").Node>): void;
                clearEvents(): void;
                reset(): void;
                setEnabled(enabled: boolean): void;
                setNodeEvent(eventType: import("..").NodeEventTypes, nodeIdSelector: string | string[]): void;
                setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
                setIndicator(indicator: import("..").Indicator): void;
                setHidden(id: string, bool: boolean): void;
                setProp(selector: string | string[], cb: (props: any) => void): void;
                selectNode(nodeIdSelector?: string | string[]): void;
                setOptions(cb: (options: Partial<import("..").LegacyStateOptions>) => void): void;
                deserialize(input: string | Record<string, import("..").SerializedNode>): void;
            };
            throttle: (rate: number) => {
                addLinkedNodeFromTree(tree: import("..").NodeTree, parentId: string, id: string): void;
                add(nodeToAdd: import("..").LegacyNode | import("..").Node | import("..").Node[] | import("..").LegacyNode[], parentId: string, index?: number): void;
                addNodeTree(tree: import("..").NodeTree, parentId?: string, index?: number): void;
                delete(selector: string | string[]): void;
                move(selector: string | string[] | import("..").Node | import("..").Node[], newParentId: string, index: number): void;
                replaceNodes(nodes: Record<string, import("..").Node>): void;
                clearEvents(): void;
                reset(): void;
                setEnabled(enabled: boolean): void;
                setNodeEvent(eventType: import("..").NodeEventTypes, nodeIdSelector: string | string[]): void;
                setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
                setIndicator(indicator: import("..").Indicator): void;
                setHidden(id: string, bool: boolean): void;
                setProp(selector: string | string[], cb: (props: any) => void): void;
                selectNode(nodeIdSelector?: string | string[]): void;
                setOptions(cb: (options: Partial<import("..").LegacyStateOptions>) => void): void;
                deserialize(input: string | Record<string, import("..").SerializedNode>): void;
            };
            merge: () => {
                addLinkedNodeFromTree(tree: import("..").NodeTree, parentId: string, id: string): void;
                add(nodeToAdd: import("..").LegacyNode | import("..").Node | import("..").Node[] | import("..").LegacyNode[], parentId: string, index?: number): void;
                addNodeTree(tree: import("..").NodeTree, parentId?: string, index?: number): void;
                delete(selector: string | string[]): void;
                move(selector: string | string[] | import("..").Node | import("..").Node[], newParentId: string, index: number): void;
                replaceNodes(nodes: Record<string, import("..").Node>): void;
                clearEvents(): void;
                reset(): void;
                setEnabled(enabled: boolean): void;
                setNodeEvent(eventType: import("..").NodeEventTypes, nodeIdSelector: string | string[]): void;
                setCustom<T extends string>(selector: string | string[], cb: (data: any) => void): void;
                setIndicator(indicator: import("..").Indicator): void;
                setHidden(id: string, bool: boolean): void;
                setProp(selector: string | string[], cb: (props: any) => void): void;
                selectNode(nodeIdSelector?: string | string[]): void;
                setOptions(cb: (options: Partial<import("..").LegacyStateOptions>) => void): void;
                deserialize(input: string | Record<string, import("..").SerializedNode>): void;
            };
        };
    };
    query: EditorQuery;
    connectors: import("@craftjs/utils").ChainableConnectors<import("@craftjs/utils").ChainableConnectors<{
        connect: (el: HTMLElement, id: string) => void;
        select: (el: HTMLElement, id: string) => void;
        hover: (el: HTMLElement, id: string) => void;
        drag: (el: HTMLElement, id: string) => void;
        drop: (el: HTMLElement, id: string) => void;
        create: (el: HTMLElement, UserElement: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>, options?: Partial<import("..").CreateHandlerOptions>) => void;
    }, HTMLElement>, HTMLElement | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>>;
    inContext: boolean;
    store: import("../store").EditorStore;
};
