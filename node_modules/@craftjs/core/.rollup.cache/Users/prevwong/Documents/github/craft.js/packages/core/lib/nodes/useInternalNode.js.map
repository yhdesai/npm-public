{"version":3,"file":"useInternalNode.js","sourceRoot":"","sources":["../../src/nodes/useInternalNode.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAEhE,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAIrC,MAAM,UAAU,eAAe,CAAW,OAA0B;IAClE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IACxC,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAE5C,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,iBAAiB,EAAE,CAAC;IAE9D,MAAM,iBAAiB,GAAG,CAAC,OAAO;QAChC,CAAC,CAAC,IAAI;QACN,CAAC,CAAC,CAAC,KAAkB,EAAE,EAAE,CACrB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAE3D,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;IAEzD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;QAC3B,OAAO;YACL,OAAO,EAAE,CAAC,EAAO,EAAE,YAAqB,EAAE,EAAE;gBAC1C,IAAI,YAAY,EAAE;oBAChB,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;iBAC9D;qBAAM;oBACL,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;iBAC/B;YACH,CAAC;YACD,SAAS,EAAE,CAAC,EAAO,EAAE,YAAqB,EAAE,EAAE;gBAC5C,IAAI,YAAY,EAAE;oBAChB,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;iBAChE;qBAAM;oBACL,aAAa,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;iBACjC;YACH,CAAC;YACD,SAAS,EAAE,CAAC,IAAa,EAAE,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;SAChE,CAAC;IACJ,CAAC,EAAE,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC;IAExB,OAAO;QACL,GAAG,SAAS;QACZ,EAAE;QACF,OAAO;QACP,aAAa,EAAE,CAAC,CAAC,OAAO;QACxB,OAAO;QACP,UAAU;KACX,CAAC;AACJ,CAAC","sourcesContent":["import { useCollector } from '@craftjs/utils';\nimport { useMemo, useContext } from 'react';\n\nimport { NodeContext } from './NodeContext';\n\nimport { useInternalEditor } from '../editor/useInternalEditor';\nimport { EditorState } from '../interfaces';\nimport { NodeQuery } from '../store';\n\nexport type NodeCollector<C> = (node: NodeQuery) => C;\n\nexport function useInternalNode<C = null>(collect?: NodeCollector<C>) {\n  const context = useContext(NodeContext);\n  const { id, related, connectors } = context;\n\n  const { actions: EditorActions, store } = useInternalEditor();\n\n  const collectorCallback = !collect\n    ? null\n    : (state: EditorState) =>\n        state.nodes[id] && collect(new NodeQuery(store, id));\n\n  const collected = useCollector(store, collectorCallback);\n\n  const actions = useMemo(() => {\n    return {\n      setProp: (cb: any, throttleRate?: number) => {\n        if (throttleRate) {\n          EditorActions.history.throttle(throttleRate).setProp(id, cb);\n        } else {\n          EditorActions.setProp(id, cb);\n        }\n      },\n      setCustom: (cb: any, throttleRate?: number) => {\n        if (throttleRate) {\n          EditorActions.history.throttle(throttleRate).setCustom(id, cb);\n        } else {\n          EditorActions.setCustom(id, cb);\n        }\n      },\n      setHidden: (bool: boolean) => EditorActions.setHidden(id, bool),\n    };\n  }, [EditorActions, id]);\n\n  return {\n    ...collected,\n    id,\n    related,\n    inNodeContext: !!context,\n    actions,\n    connectors,\n  };\n}\n"]}