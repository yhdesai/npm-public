import { useCollector } from '@craftjs/utils';
import { useMemo, useContext } from 'react';
import { NodeContext } from './NodeContext';
import { useInternalEditor } from '../editor/useInternalEditor';
import { NodeQuery } from '../store';
export function useInternalNode(collect) {
    const context = useContext(NodeContext);
    const { id, related, connectors } = context;
    const { actions: EditorActions, store } = useInternalEditor();
    const collectorCallback = !collect
        ? null
        : (state) => state.nodes[id] && collect(new NodeQuery(store, id));
    const collected = useCollector(store, collectorCallback);
    const actions = useMemo(() => {
        return {
            setProp: (cb, throttleRate) => {
                if (throttleRate) {
                    EditorActions.history.throttle(throttleRate).setProp(id, cb);
                }
                else {
                    EditorActions.setProp(id, cb);
                }
            },
            setCustom: (cb, throttleRate) => {
                if (throttleRate) {
                    EditorActions.history.throttle(throttleRate).setCustom(id, cb);
                }
                else {
                    EditorActions.setCustom(id, cb);
                }
            },
            setHidden: (bool) => EditorActions.setHidden(id, bool),
        };
    }, [EditorActions, id]);
    return {
        ...collected,
        id,
        related,
        inNodeContext: !!context,
        actions,
        connectors,
    };
}
//# sourceMappingURL=useInternalNode.js.map