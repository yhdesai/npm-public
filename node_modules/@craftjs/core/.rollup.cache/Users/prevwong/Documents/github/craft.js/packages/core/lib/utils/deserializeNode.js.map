{"version":3,"file":"deserializeNode.js","sourceRoot":"","sources":["../../src/utils/deserializeNode.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,2CAA2C,EAAE,MAAM,gBAAgB,CAAC;AAC7E,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAYtD,MAAM,WAAW,GAAG,CAAC,IAAoB,EAAE,QAAkB,EAAE,EAAE,CAC/D,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,YAAY;IAC3C,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ;QAC1B,CAAC,CAAC,IAAI;QACN,CAAC,CAAC,IAAI,CAAC;AAEX,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAiB,EACjB,QAAkB,EAClB,KAAc,EACW,EAAE;IAC3B,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAE3B,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEzC,IAAI,CAAC,IAAI,EAAE;QACT,OAAO;KACR;IAED,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAA2B,EAAE,GAAG,EAAE,EAAE;QACrE,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YACvC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACpB;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;YACxD,MAAM,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAC/C;aAAM,IAAI,GAAG,KAAK,UAAU,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACpD,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,OAAO,KAAK,CAAC;iBACd;gBACD,OAAO,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACpB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,KAAK,EAAE;QACT,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;KACnB;IAED,MAAM,GAAG,GAAG;QACV,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE;YAC3B,GAAG,KAAK;SACT,CAAC;KACH,CAAC;IAEF,OAAO;QACL,GAAG,GAAG;QACN,IAAI,EAAE,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC;KAC3C,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAoB,EACpB,QAAkB,EACa,EAAE;IACjC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC;IAEvD,MAAM,mBAAmB,GAAG,IAAI,KAAK,SAAS,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC;IAC3E,MAAM,oBAAoB,GACxB,IAAI,KAAK,SAAS;QACjB,IAAkC,CAAC,YAAY,KAAK,SAAS,CAAC;IAEjE,SAAS,CACP,mBAAmB,IAAI,oBAAoB,EAC3C,2CAA2C,CAAC,OAAO,CACjD,eAAe,EACf,IAAI,CAAC,WAAW,CACjB,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrE,CAAC;IAEF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAI,eAAe,CAC5C,IAAI,EACJ,QAAQ,CACqB,CAAC;IAEhC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;IAE1E,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,YAAY,CAAC;IAElE,OAAO;QACL,IAAI;QACJ,IAAI;QACJ,WAAW,EAAE,WAAW,IAAI,IAAI;QAChC,KAAK;QACL,MAAM,EAAE,MAAM,IAAI,EAAE;QACpB,QAAQ,EAAE,CAAC,CAAC,QAAQ;QACpB,MAAM,EAAE,CAAC,CAAC,MAAM;QAChB,MAAM;QACN,WAAW,EAAE,WAAW,IAAI,EAAE;QAC9B,KAAK,EAAE,KAAK,IAAI,EAAE;KACnB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { ERROR_DESERIALIZE_COMPONENT_NOT_IN_RESOLVER } from '@craftjs/utils';\nimport React from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { resolveComponent } from './resolveComponent';\n\nimport {\n  LegacyNodeData,\n  SerializedNode,\n  ReducedComp,\n  ReduceCompType,\n} from '../interfaces';\nimport { Resolver } from '../interfaces';\n\ntype DeserialisedType = JSX.Element & { name: string };\n\nconst restoreType = (type: ReduceCompType, resolver: Resolver) =>\n  typeof type === 'object' && type.resolvedName\n    ? resolver[type.resolvedName]\n    : typeof type === 'string'\n    ? type\n    : null;\n\nexport const deserializeComp = (\n  data: ReducedComp,\n  resolver: Resolver,\n  index?: number\n): DeserialisedType | void => {\n  let { type, props } = data;\n\n  const main = restoreType(type, resolver);\n\n  if (!main) {\n    return;\n  }\n\n  props = Object.keys(props).reduce((result: Record<string, any>, key) => {\n    const prop = props[key];\n    if (prop === null || prop === undefined) {\n      result[key] = null;\n    } else if (typeof prop === 'object' && prop.resolvedName) {\n      result[key] = deserializeComp(prop, resolver);\n    } else if (key === 'children' && Array.isArray(prop)) {\n      result[key] = prop.map((child) => {\n        if (typeof child === 'string') {\n          return child;\n        }\n        return deserializeComp(child, resolver);\n      });\n    } else {\n      result[key] = prop;\n    }\n    return result;\n  }, {});\n\n  if (index) {\n    props.key = index;\n  }\n\n  const jsx = {\n    ...React.createElement(main, {\n      ...props,\n    }),\n  };\n\n  return {\n    ...jsx,\n    name: resolveComponent(resolver, jsx.type),\n  };\n};\n\nexport const deserializeNode = (\n  data: SerializedNode,\n  resolver: Resolver\n): Omit<LegacyNodeData, 'event'> => {\n  const { type: Comp, props: Props, ...nodeData } = data;\n\n  const isCompAnHtmlElement = Comp !== undefined && typeof Comp === 'string';\n  const isCompAUserComponent =\n    Comp !== undefined &&\n    (Comp as { resolvedName?: string }).resolvedName !== undefined;\n\n  invariant(\n    isCompAnHtmlElement || isCompAUserComponent,\n    ERROR_DESERIALIZE_COMPONENT_NOT_IN_RESOLVER.replace(\n      '%displayName%',\n      data.displayName\n    ).replace('%availableComponents%', Object.keys(resolver).join(', '))\n  );\n\n  const { type, name, props } = (deserializeComp(\n    data,\n    resolver\n  ) as unknown) as LegacyNodeData;\n\n  const { parent, custom, displayName, isCanvas, nodes, hidden } = nodeData;\n\n  const linkedNodes = nodeData.linkedNodes || nodeData._childCanvas;\n\n  return {\n    type,\n    name,\n    displayName: displayName || name,\n    props,\n    custom: custom || {},\n    isCanvas: !!isCanvas,\n    hidden: !!hidden,\n    parent,\n    linkedNodes: linkedNodes || {},\n    nodes: nodes || [],\n  };\n};\n"]}