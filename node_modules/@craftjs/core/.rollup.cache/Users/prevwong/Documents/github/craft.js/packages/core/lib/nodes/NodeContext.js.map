{"version":3,"file":"NodeContext.js","sourceRoot":"","sources":["../../src/nodes/NodeContext.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAuB,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACzE,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAerC,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAkB,IAAI,CAAC,CAAC;AAItE,MAAM,CAAC,MAAM,YAAY,GAAgC,CAAC,EACxD,EAAE,EACF,OAAO,GAAG,KAAK,EACf,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;IAEhC,MAAM,UAAU,GAAG,OAAO,CACxB,GAAG,EAAE,CACH,kBAAkB,CAAC;QACjB,OAAO,EAAE,CAAC,GAAgB,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;QACnE,IAAI,EAAE,CAAC,GAAgB,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;KAC9D,CAAC,EACJ,CAAC,QAAQ,EAAE,EAAE,CAAC,CACf,CAAC;IAEF,OAAO,CACL,oBAAC,WAAW,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,IACrD,QAAQ,CACY,CACxB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { ChainableConnectors, wrapConnectorHooks } from '@craftjs/utils';\nimport React, { useMemo } from 'react';\n\nimport { useEditor } from '../hooks';\nimport { NodeId } from '../interfaces';\n\nexport type NodeContextType = {\n  id: NodeId;\n  related?: boolean;\n  connectors: ChainableConnectors<\n    {\n      connect: (element: HTMLElement) => void;\n      drag: (element: HTMLElement) => void;\n    },\n    React.ReactElement\n  >;\n};\n\nexport const NodeContext = React.createContext<NodeContextType>(null);\n\nexport type NodeProviderProps = Omit<NodeContextType, 'connectors'>;\n\nexport const NodeProvider: React.FC<NodeProviderProps> = ({\n  id,\n  related = false,\n  children,\n}) => {\n  const { store } = useEditor(() => ({}));\n  const handlers = store.handlers;\n\n  const connectors = useMemo(\n    () =>\n      wrapConnectorHooks({\n        connect: (dom: HTMLElement) => handlers.connectors.connect(dom, id),\n        drag: (dom: HTMLElement) => handlers.connectors.drag(dom, id),\n      }),\n    [handlers, id]\n  );\n\n  return (\n    <NodeContext.Provider value={{ id, related, connectors }}>\n      {children}\n    </NodeContext.Provider>\n  );\n};\n"]}