{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../src/store/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  deprecationWarning,\n  ERROR_INVALID_NODEID,\n  ROOT_NODE,\n  DEPRECATED_ROOT_NODE,\n  ERROR_NOPARENT,\n} from '@craftjs/utils';\nimport invariant from 'tiny-invariant';\n\nimport { EditorStore } from './EditorStore';\n\nimport {\n  EditorState,\n  Indicator,\n  NodeId,\n  Node,\n  Nodes,\n  LegacyStateOptions,\n  NodeEventTypes,\n  NodeTree,\n  SerializedNodes,\n  NodeSelector,\n  NodeSelectorType,\n  LegacyNode,\n} from '../interfaces';\nimport { fromEntries } from '../utils/fromEntries';\nimport { getNodesFromSelector } from '../utils/getNodesFromSelector';\nimport { removeNodeFromEvents } from '../utils/removeNodeFromEvents';\nimport { adaptLegacyNode } from '../utils/types';\n\n// TODO: refactor\nexport const ActionMethods = (state: EditorState, store: EditorStore) => {\n  const action = () => ActionMethods(state, store);\n  const query = store.query;\n\n  /** Helper functions */\n  const getParentAndValidate = (parentId: NodeId): Node => {\n    invariant(parentId, ERROR_NOPARENT);\n    const parent = state.nodes[parentId];\n    invariant(parent, ERROR_INVALID_NODEID);\n    return parent;\n  };\n\n  return {\n    /**\n     * @private\n     * Add a new linked Node to the editor.\n     * Only used internally by the <Element /> component\n     *\n     * @param tree\n     * @param parentId\n     * @param id\n     */\n    addLinkedNodeFromTree(tree: NodeTree, parentId: NodeId, id: string) {\n      const parent = getParentAndValidate(parentId);\n      if (!parent.linkedNodes) {\n        parent.linkedNodes = {};\n      }\n\n      const existingLinkedNode = parent.linkedNodes[id];\n      if (existingLinkedNode) {\n        action().delete(existingLinkedNode);\n      }\n\n      parent.linkedNodes[id] = tree.rootNodeId;\n\n      tree.nodes[tree.rootNodeId].parent = parentId;\n      state.nodes[tree.rootNodeId] = tree.nodes[tree.rootNodeId];\n\n      action().addNodeTree(tree);\n    },\n\n    /**\n     * Add a new Node to the editor.\n     *\n     * @param nodeToAdd\n     * @param parentId\n     * @param index\n     */\n    add(\n      nodeToAdd: Node | Node[] | LegacyNode | LegacyNode[],\n      parentId: NodeId,\n      index?: number\n    ) {\n      let nodes = [nodeToAdd];\n      if (Array.isArray(nodeToAdd)) {\n        deprecationWarning('actions.add(node: Node[])', {\n          suggest: 'actions.add(node: Node)',\n        });\n        nodes = nodeToAdd;\n      }\n\n      nodes.forEach((nodeOrlegacyNode: Node | LegacyNode) => {\n        const node = adaptLegacyNode(nodeOrlegacyNode, store.resolver);\n        state.nodes[node.id] = node;\n\n        if (parentId) {\n          const parent = getParentAndValidate(parentId);\n\n          if (index != null) {\n            parent.nodes.splice(index, 0, node.id);\n          } else {\n            parent.nodes.push(node.id);\n          }\n\n          node.parent = parent.id;\n        }\n      });\n    },\n\n    /**\n     * Add a NodeTree to the editor\n     *\n     * @param tree\n     * @param parentId\n     * @param index\n     */\n    addNodeTree(tree: NodeTree, parentId?: NodeId, index?: number) {\n      const { nodes, linkedNodes, ...node } = tree.nodes[tree.rootNodeId];\n\n      action().add(\n        {\n          ...node,\n          nodes: [],\n          linkedNodes: {},\n        },\n        parentId,\n        index\n      );\n\n      if (nodes) {\n        nodes.map((childNodeId) =>\n          action().addNodeTree(\n            { rootNodeId: childNodeId, nodes: tree.nodes },\n            node.id\n          )\n        );\n      }\n\n      if (linkedNodes) {\n        Object.keys(linkedNodes).forEach((linkedId) => {\n          const nodeId = linkedNodes[linkedId];\n          action().addLinkedNodeFromTree(\n            { rootNodeId: nodeId, nodes: tree.nodes },\n            node.id,\n            linkedId\n          );\n        });\n      }\n    },\n\n    /**\n     * Delete a Node\n     * @param id\n     */\n    delete(selector: NodeSelector<NodeSelectorType.Id>) {\n      const targets = getNodesFromSelector(store, selector, {\n        existOnly: true,\n        idOnly: true,\n      });\n\n      targets.forEach(({ node }) => {\n        const { id } = node;\n\n        const targetNode = state.nodes[id],\n          parentNode = state.nodes[targetNode.parent];\n\n        if (targetNode.nodes) {\n          // we deep clone here because otherwise immer will mutate the node\n          // object as we remove nodes\n          [...targetNode.nodes].forEach((childId) => action().delete(childId));\n        }\n\n        if (targetNode.linkedNodes) {\n          Object.values(targetNode.linkedNodes).map((linkedNodeId) =>\n            action().delete(linkedNodeId)\n          );\n        }\n\n        const isChildNode = parentNode.nodes.includes(id);\n\n        if (isChildNode) {\n          const parentChildren = parentNode.nodes;\n          parentChildren.splice(parentChildren.indexOf(id), 1);\n        } else {\n          const linkedId = Object.keys(parentNode.linkedNodes).find(\n            (id) => parentNode.linkedNodes[id] === id\n          );\n          if (linkedId) {\n            delete parentNode.linkedNodes[linkedId];\n          }\n        }\n\n        removeNodeFromEvents(state, id);\n        delete state.nodes[id];\n      });\n    },\n\n    /**\n     * Move a target Node to a new Parent at a given index\n     * @param targetId\n     * @param newParentId\n     * @param index\n     */\n    move(selector: NodeSelector, newParentId: NodeId, index: number) {\n      const targets = getNodesFromSelector(store, selector, {\n        existOnly: true,\n      });\n\n      const newParent = state.nodes[newParentId];\n      targets.forEach(({ node: targetNode }, i) => {\n        const targetId = targetNode.id;\n        const currentParentId = targetNode.parent;\n\n        query.node(newParentId).isDroppable([targetId], (err) => {\n          throw new Error(err);\n        });\n\n        const currentParent = state.nodes[currentParentId];\n        const currentParentNodes = currentParent.nodes;\n\n        currentParentNodes[currentParentNodes.indexOf(targetId)] = 'marked';\n\n        newParent.nodes.splice(index + i, 0, targetId);\n\n        state.nodes[targetId].parent = newParentId;\n        currentParentNodes.splice(currentParentNodes.indexOf('marked'), 1);\n      });\n    },\n\n    replaceNodes(nodes: Nodes) {\n      this.clearEvents();\n      state.nodes = nodes;\n      state.timestamp = Date.now();\n    },\n\n    clearEvents() {\n      this.setNodeEvent('selected', null);\n      this.setNodeEvent('hovered', null);\n      this.setNodeEvent('dragged', null);\n      this.setIndicator(null);\n    },\n\n    /**\n     * Resets all the editor state.\n     */\n    reset() {\n      this.clearEvents();\n      this.replaceNodes({});\n    },\n\n    setEnabled(enabled: boolean) {\n      state.enabled = enabled;\n    },\n\n    setNodeEvent(\n      eventType: NodeEventTypes,\n      nodeIdSelector: NodeSelector<NodeSelectorType.Id>\n    ) {\n      state.events[eventType] = new Set();\n\n      if (!nodeIdSelector) {\n        return;\n      }\n\n      const targets = getNodesFromSelector(store, nodeIdSelector, {\n        idOnly: true,\n        existOnly: true,\n      });\n\n      const nodeIds: Set<NodeId> = new Set(targets.map(({ node }) => node.id));\n      state.events[eventType] = nodeIds;\n    },\n\n    /**\n     * Set custom values to a Node\n     * @param id\n     * @param cb\n     */\n    setCustom<T extends NodeId>(\n      selector: NodeSelector<NodeSelectorType.Id>,\n      cb: (data: EditorState['nodes'][T]['custom']) => void\n    ) {\n      const targets = getNodesFromSelector(store, selector, {\n        idOnly: true,\n        existOnly: true,\n      });\n\n      targets.forEach(({ node }) => cb(state.nodes[node.id].custom));\n    },\n\n    setIndicator(indicator: Indicator | null) {\n      state.indicator = indicator;\n    },\n\n    /**\n     * Hide a Node\n     * @param id\n     * @param bool\n     */\n    setHidden(id: NodeId, bool: boolean) {\n      state.nodes[id].hidden = bool;\n    },\n\n    /**\n     * Update the props of a Node\n     * @param id\n     * @param cb\n     */\n    setProp(\n      selector: NodeSelector<NodeSelectorType.Id>,\n      cb: (props: any) => void\n    ) {\n      const targets = getNodesFromSelector(store, selector, {\n        idOnly: true,\n        existOnly: true,\n      });\n\n      targets.forEach(({ node }) => cb(state.nodes[node.id].props));\n    },\n\n    selectNode(nodeIdSelector?: NodeSelector<NodeSelectorType.Id>) {\n      if (nodeIdSelector) {\n        const targets = getNodesFromSelector(store, nodeIdSelector, {\n          idOnly: true,\n          existOnly: true,\n        });\n\n        this.setNodeEvent(\n          'selected',\n          targets.map(({ node }) => node.id)\n        );\n      } else {\n        this.setNodeEvent('selected', null);\n      }\n\n      this.setNodeEvent('hovered', null);\n    },\n\n    /**\n     * Set editor options via a callback function\n     * @deprecated\n     * @param cb: function used to set the options.\n     */\n    setOptions(cb: (options: Partial<LegacyStateOptions>) => void) {\n      const opts = { enabled: state.enabled };\n      cb(opts);\n      state.enabled = opts.enabled;\n    },\n\n    /**\n     * @deprecated\n     * @param input\n     */\n    deserialize(input: SerializedNodes | string) {\n      const dehydratedNodes =\n        typeof input == 'string' ? JSON.parse(input) : input;\n\n      const nodePairs = Object.keys(dehydratedNodes).map((id) => {\n        let nodeId = id;\n\n        if (id === DEPRECATED_ROOT_NODE) {\n          nodeId = ROOT_NODE;\n        }\n\n        return [\n          nodeId,\n          query\n            .parseSerializedNode(dehydratedNodes[id])\n            .toNode((node) => (node.id = nodeId)),\n        ];\n      });\n\n      this.replaceNodes(fromEntries(nodePairs));\n    },\n  };\n};\n"]}