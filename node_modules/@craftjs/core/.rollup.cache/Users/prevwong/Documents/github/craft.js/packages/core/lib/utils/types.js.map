{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/utils/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAC;AACvD,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAC;AAI1E,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,cAA6B,EAAE,EAAQ,EAAE,CAAC,CAAC;IACpE,EAAE,EAAE,WAAW,CAAC,EAAE,IAAI,eAAe,EAAE;IACvC,IAAI,EAAE,WAAW,CAAC,IAAI,IAAI,KAAK;IAC/B,WAAW,EAAE,WAAW,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI;IACxD,KAAK,EAAE;QACL,GAAG,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC;KAC7B;IACD,MAAM,EAAE;QACN,GAAG,CAAC,WAAW,CAAC,MAAM,IAAI,EAAE,CAAC;KAC9B;IACD,MAAM,EAAE,WAAW,CAAC,MAAM,IAAI,IAAI;IAClC,KAAK,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;IACrC,WAAW,EAAE;QACX,GAAG,CAAC,WAAW,CAAC,WAAW,IAAI,EAAE,CAAC;KACnC;IACD,MAAM,EAAE,WAAW,CAAC,MAAM,IAAI,KAAK;IACnC,QAAQ,EAAE,WAAW,CAAC,QAAQ,IAAI,KAAK;CACxC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAC1C,WAA0B,EAC1B,QAAkB,EAClB,EAAE;IACF,MAAM,cAAc,GAAG,iBAAiB,CAAC,WAAW,CAAC,IAAI,IAAI,KAAK,EAAE,QAAQ,CAAC,CAAC;IAE9E,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,UAAU,CAAC,WAAW,CAAC,CAAC;KAChC;IAED,OAAO,UAAU,CAAC;QAChB,GAAG,WAAW;QACd,WAAW,EAAE,WAAW,CAAC,WAAW,IAAI,cAAc,CAAC,WAAW;QAClE,KAAK,EAAE;YACL,GAAG,cAAc,CAAC,KAAK;YACvB,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;SAChD;QACD,MAAM,EAAE;YACN,GAAG,cAAc,CAAC,MAAM;YACxB,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;SAClD;QACD,QAAQ,EAAE,WAAW,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ;KAC1D,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAmC,EACnC,QAAkB,EAClB,EAAE;IACF,IAAK,IAAmB,CAAC,IAAI,EAAE;QAC7B,MAAM,EACJ,EAAE,EACF,IAAI,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,cAAc,EAAE,GACjD,GAAG,IAAkB,CAAC;QAEvB,MAAM,IAAI,GAAG,sBAAsB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC7D,SAAS,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;QAEvC,OAAO,4BAA4B,CACjC;YACE,EAAE;YACF,IAAI;YACJ,GAAG,cAAc;SAClB,EACD,QAAQ,CACT,CAAC;KACH;IAED,OAAO,4BAA4B,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACtD,CAAC,CAAC","sourcesContent":["import { ERROR_NOT_IN_RESOLVER } from '@craftjs/utils';\nimport invariant from 'tiny-invariant';\n\nimport { getRandomNodeId } from './getRandomNodeId';\nimport { getResolverConfig, resolveComponentToType } from './resolveNode';\n\nimport { FreshNode, LegacyNode, Node, Resolver } from '../interfaces';\n\nexport const createNode = (partialNode: Partial<Node> = {}): Node => ({\n  id: partialNode.id || getRandomNodeId(),\n  type: partialNode.type || 'div',\n  displayName: partialNode.displayName || partialNode.type,\n  props: {\n    ...(partialNode.props || {}),\n  },\n  custom: {\n    ...(partialNode.custom || {}),\n  },\n  parent: partialNode.parent || null,\n  nodes: [...(partialNode.nodes || [])],\n  linkedNodes: {\n    ...(partialNode.linkedNodes || {}),\n  },\n  hidden: partialNode.hidden || false,\n  isCanvas: partialNode.isCanvas || false,\n});\n\nexport const createNodeWithResolverConfig = (\n  partialNode: Partial<Node>,\n  resolver: Resolver\n) => {\n  const resolverConfig = getResolverConfig(partialNode.type || 'div', resolver);\n\n  if (!resolverConfig) {\n    return createNode(partialNode);\n  }\n\n  return createNode({\n    ...partialNode,\n    displayName: partialNode.displayName || resolverConfig.displayName,\n    props: {\n      ...resolverConfig.props,\n      ...(partialNode.props ? partialNode.props : {}),\n    },\n    custom: {\n      ...resolverConfig.custom,\n      ...(partialNode.custom ? partialNode.custom : {}),\n    },\n    isCanvas: partialNode.isCanvas || resolverConfig.isCanvas,\n  });\n};\n\nexport const adaptLegacyNode = (\n  node: Node | LegacyNode | FreshNode,\n  resolver: Resolver\n) => {\n  if ((node as LegacyNode).data) {\n    const {\n      id,\n      data: { type: componentType, ...legacyNodeData },\n    } = node as LegacyNode;\n\n    const type = resolveComponentToType(resolver, componentType);\n    invariant(type, ERROR_NOT_IN_RESOLVER);\n\n    return createNodeWithResolverConfig(\n      {\n        id,\n        type,\n        ...legacyNodeData,\n      },\n      resolver\n    );\n  }\n\n  return createNodeWithResolverConfig(node, resolver);\n};\n"]}