import React from 'react';
import { LegacyNode, LegacyNodeQuery } from './legacy/nodes';
export declare type UserComponentConfig<T> = {
    displayName: string;
    rules: Partial<NodeRules>;
    related: Partial<NodeRelated>;
    props: Partial<T>;
    custom: Record<string, any>;
    isCanvas: boolean;
};
export declare type UserComponent<T = any> = React.ComponentType<T> & {
    craft?: Partial<UserComponentConfig<T>>;
};
export declare type NodeId = string;
export declare type NodeEventTypes = 'selected' | 'dragged' | 'hovered';
export declare type Node = {
    id: NodeId;
    type: string;
    props: Record<string, any>;
    displayName: string;
    isCanvas: boolean;
    parent: NodeId;
    linkedNodes: Record<string, NodeId>;
    nodes: NodeId[];
    hidden: boolean;
    custom?: any;
};
export declare type BackwardsCompatibleNode = Node & LegacyNode;
export declare type NodeHelpersType = (id: NodeId) => LegacyNodeQuery;
export declare type NodeRules = {
    canDrag(node: BackwardsCompatibleNode, helpers: NodeHelpersType): boolean;
    canDrop(dropTarget: BackwardsCompatibleNode, self: BackwardsCompatibleNode, helpers: NodeHelpersType): boolean;
    canMoveIn(canMoveIn: BackwardsCompatibleNode[], self: BackwardsCompatibleNode, helpers: NodeHelpersType): boolean;
    canMoveOut(canMoveOut: BackwardsCompatibleNode[], self: BackwardsCompatibleNode, helpers: NodeHelpersType): boolean;
};
export declare type NodeRelated = Record<string, React.ElementType>;
export declare type Nodes = Record<NodeId, Node>;
/**
 * A NodeTree is an internal data structure for CRUD operations that involve
 * more than a single node.
 *
 * For example, when we drop a component we use a tree because we
 * need to drop more than a single component.
 */
export interface NodeTree {
    rootNodeId: NodeId;
    nodes: Nodes;
}
declare type NodeIdSelector = NodeId | NodeId[];
declare type NodeObjSelector = Node | Node[];
export declare enum NodeSelectorType {
    Any = 0,
    Id = 1,
    Obj = 2
}
export declare type NodeSelector<T extends NodeSelectorType = NodeSelectorType.Any> = T extends NodeSelectorType.Id ? NodeIdSelector : T extends NodeSelectorType.Obj ? NodeObjSelector : NodeIdSelector | NodeObjSelector;
export declare type NodeSelectorWrapper = {
    node: Node;
    exists: boolean;
};
export {};
