import React from 'react';
import { NodeQuery } from './NodeQuery';
import { FreshNode, Indicator, LegacyEditorQuery, Node, NodeEventTypes, NodeId, NodeSelector, NodeTree, SerializedNode, SerializedNodes } from '../../interfaces';
import { EditorStore } from '../EditorStore';
export declare class EditorQuery implements LegacyEditorQuery {
    private readonly store;
    constructor(store: EditorStore);
    protected readonly state: import("../../interfaces").EditorState;
    readonly root: NodeQuery;
    isEnabled(): boolean;
    node(id: NodeId): NodeQuery;
    event(eventType: NodeEventTypes): {
        contains(id: string): boolean;
        isEmpty(): boolean;
        first(): any;
        last(): any;
        all(): string[];
        size(): any;
        at(i: number): any;
        raw(): Set<string>;
    };
    getDropPlaceholder(source: NodeSelector, target: NodeId, pos: {
        x: number;
        y: number;
    }, nodeIdToDOM?: (id: NodeId) => HTMLElement): Indicator;
    getState(): import("../../interfaces").EditorState;
    /**
     * @deprecated
     * @param reactElement
     * @returns
     */
    parseReactElement(reactElement: React.ReactElement): {
        toNodeTree: (normalize?: (node: Node, jsx: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>) => void) => NodeTree;
    };
    readonly history: {
        canUndo: () => boolean;
        canRedo: () => boolean;
    };
    /**
     * @deprecated
     */
    readonly events: Record<NodeEventTypes, Set<string>>;
    /**
     * @deprecated
     */
    readonly nodes: Record<string, NodeQuery>;
    /**
     * @deprecated
     */
    readonly options: {
        enabled: boolean;
        onRender: React.ComponentType<{
            render: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>;
        }>;
        onNodesChange: (query: EditorQuery) => void;
        indicator: Partial<{
            success: string;
            error: string;
            transition: string;
            thickness: number;
        }>;
        handlers: (store: EditorStore) => import("../..").CoreEventHandlers<{}>;
        normalizeNodes: (state: import("../../interfaces").EditorState, previousState: import("../../interfaces").EditorState) => void;
        resolver: Record<string, string | React.ComponentClass<any, any> | React.FunctionComponent<any>>;
    };
    /**
     * @deprecated
     */
    readonly indicator: Indicator;
    /**
     * @deprecated
     */
    readonly timestamp: number;
    /**
     * @deprecated
     */
    getEvent(eventType: NodeEventTypes): {
        contains(id: string): boolean;
        isEmpty(): boolean;
        first(): any;
        last(): any;
        all(): string[];
        size(): any;
        at(i: number): any;
        raw(): Set<string>;
    };
    /**
     * @deprecated
     */
    getOptions(): {
        enabled: boolean;
        onRender: React.ComponentType<{
            render: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>;
        }>;
        onNodesChange: (query: EditorQuery) => void;
        indicator: Partial<{
            success: string;
            error: string;
            transition: string;
            thickness: number;
        }>;
        handlers: (store: EditorStore) => import("../..").CoreEventHandlers<{}>;
        normalizeNodes: (state: import("../../interfaces").EditorState, previousState: import("../../interfaces").EditorState) => void;
        resolver: Record<string, string | React.ComponentClass<any, any> | React.FunctionComponent<any>>;
    };
    /**
     * @deprecated
     */
    getSerializedNodes(): SerializedNodes;
    /**
     * @deprecated
     */
    serialize(): string;
    /**
     * @deprecated
     * @param serializedNode
     */
    parseSerializedNode(serializedNode: SerializedNode): {
        toNode: (normalize?: (node: Node) => void) => Node;
    };
    /**
     * @deprecated
     * @param freshNode
     */
    parseFreshNode(freshNode: FreshNode): {
        toNode: (normalize?: (node: Node) => void) => Node;
    };
}
