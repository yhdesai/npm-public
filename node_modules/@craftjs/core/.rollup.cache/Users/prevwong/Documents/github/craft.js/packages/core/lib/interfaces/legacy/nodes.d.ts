/// <reference types="react" />
import { NodeEventTypes, NodeRelated, NodeRules } from '..';
import { NodeId } from '../nodes';
export declare type LegacyNodeData = {
    props: Record<string, any>;
    type: string | React.ElementType;
    name: string;
    displayName: string;
    isCanvas: boolean;
    parent: NodeId;
    linkedNodes: Record<string, NodeId>;
    nodes: NodeId[];
    hidden: boolean;
    custom?: any;
    _childCanvas?: Record<string, NodeId>;
};
export declare type LegacyNode = {
    id: NodeId;
    data: LegacyNodeData;
    rules: NodeRules;
    events: Record<NodeEventTypes, boolean>;
    related: NodeRelated;
    dom: HTMLElement;
};
export declare type LegacyNodes = Record<NodeId, LegacyNode>;
export declare type LegacyNodeTree = {
    rootNodeId: NodeId;
    nodes: LegacyNodes;
};
export interface LegacyNodeQuery extends LegacyNode {
    get: () => LegacyNode;
    toSerializedNode: () => SerializedNode;
}
export declare type FreshNode = {
    id?: NodeId;
    data: Partial<LegacyNodeData> & Required<Pick<LegacyNodeData, 'type'>>;
};
export declare type ReduceCompType = string | {
    resolvedName: string;
};
export declare type ReducedComp = {
    type: ReduceCompType;
    isCanvas: boolean;
    props: any;
};
export declare type SerializedNode = Omit<LegacyNodeData, 'type' | 'name' | 'event'> & ReducedComp;
export declare type SerializedNodes = Record<NodeId, SerializedNode>;
