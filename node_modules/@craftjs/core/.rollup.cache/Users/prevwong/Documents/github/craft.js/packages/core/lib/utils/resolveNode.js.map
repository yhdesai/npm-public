{"version":3,"file":"resolveNode.js","sourceRoot":"","sources":["../../src/utils/resolveNode.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,WAAW,CAAC;AAI7B,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,QAAkB,EAClB,IAAgC,EAChC,EAAE;IACF,IAAI,IAAY,CAAC;IACjB,MAAM,IAAI,GAAI,IAAY,CAAC,IAAI,IAAK,IAAY,CAAC,WAAW,CAAC;IAE7D,IAAI,QAAQ,CAAC,IAAI,CAAC;QAAE,OAAO,IAAI,CAAC;IAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EACnC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,EAAE,KAAK,IAAI,EAAE;YACf,IAAI,GAAG,IAAI,CAAC;YACZ,OAAO,IAAI,CAAC;SACb;KACF;IAED,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;AAC5C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,IAAY,EAAE,QAAkB,EAAE,EAAE;IACpE,MAAM,aAAa,GAAG;QACpB,SAAS,EAAE,IAAI;QACf,WAAW,EAAE,IAAI;QACjB,KAAK,EAAE;YACL,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI;YACnB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI;YACnB,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI;YACrB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;SACvB;QACD,OAAO,EAAE,EAAE;QACX,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE,KAAK;KAChB,CAAC;IAEF,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACvB,OAAO,aAAa,CAAC;KACtB;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAEjC,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IAED,MAAM,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IAE7C,OAAO;QACL,GAAG,aAAa;QAChB,GAAG,WAAW;QACd,SAAS;QACT,WAAW,EAAE,IAAI;QACjB,KAAK,EAAE;YACL,GAAG,aAAa,CAAC,KAAK;YACtB,GAAG,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC;SAC7B;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import tags from 'html-tags';\n\nimport { Resolver } from '../interfaces';\n\nexport const resolveComponentToType = (\n  resolver: Resolver,\n  comp: React.ElementType | string\n) => {\n  let Comp: string;\n  const name = (comp as any).name || (comp as any).displayName;\n\n  if (resolver[name]) return name;\n\n  for (let i = 0; i < Object.keys(resolver).length; i++) {\n    const name = Object.keys(resolver)[i],\n      fn = resolver[name];\n    if (fn === comp) {\n      Comp = name;\n      return Comp;\n    }\n  }\n\n  if (typeof comp === 'string') return comp;\n};\n\nexport const getResolverConfig = (type: string, resolver: Resolver) => {\n  const defaultConfig = {\n    component: type,\n    displayName: type,\n    rules: {\n      canDrag: () => true,\n      canDrop: () => true,\n      canMoveIn: () => true,\n      canMoveOut: () => true,\n    },\n    related: {},\n    props: {},\n    custom: {},\n    isCanvas: false,\n  };\n\n  if (tags.includes(type)) {\n    return defaultConfig;\n  }\n\n  const component = resolver[type];\n\n  if (!component) {\n    return null;\n  }\n\n  const craftConfig = component['craft'] || {};\n\n  return {\n    ...defaultConfig,\n    ...craftConfig,\n    component,\n    displayName: type,\n    rules: {\n      ...defaultConfig.rules,\n      ...(craftConfig.rules || {}),\n    },\n  };\n};\n"]}