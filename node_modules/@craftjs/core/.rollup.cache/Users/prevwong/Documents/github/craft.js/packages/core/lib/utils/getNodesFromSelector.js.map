{"version":3,"file":"getNodesFromSelector.js","sourceRoot":"","sources":["../../src/utils/getNodesFromSelector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAM1C,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,KAAkB,EAClB,QAAsB,EACtB,MAAwB,EACD,EAAE;IACzB,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC;IACrC,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IAE9D,MAAM,YAAY,GAAG;QACnB,SAAS,EAAE,KAAK;QAChB,MAAM,EAAE,KAAK;QACb,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC;KAClB,CAAC;IAEF,MAAM,aAAa,GAAG,KAAK;SACxB,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SACxB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACZ,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO;gBACL,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC;gBACjB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;aACtB,CAAC;SACH;QAED,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACpD,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;YACnD,OAAO;gBACL,IAAI;gBACJ,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;aACzB,CAAC;SACH;QAED,OAAO;YACL,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,KAAK;SACd,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,IAAI,YAAY,CAAC,SAAS,EAAE;QAC1B,SAAS,CACP,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EACjE,oBAAoB,CACrB,CAAC;KACH;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { ERROR_INVALID_NODEID } from '@craftjs/utils';\nimport invariant from 'tiny-invariant';\n\nimport { adaptLegacyNode } from './types';\n\nimport { NodeSelectorWrapper, NodeSelector } from '../interfaces';\nimport { EditorStore } from '../store';\n\ntype config = { existOnly: boolean; idOnly: boolean };\nexport const getNodesFromSelector = (\n  store: EditorStore,\n  selector: NodeSelector,\n  config?: Partial<config>\n): NodeSelectorWrapper[] => {\n  const nodes = store.getState().nodes;\n  const items = Array.isArray(selector) ? selector : [selector];\n\n  const mergedConfig = {\n    existOnly: false,\n    idOnly: false,\n    ...(config || {}),\n  };\n\n  const nodeSelectors = items\n    .filter((item) => !!item)\n    .map((item) => {\n      if (typeof item === 'string') {\n        return {\n          node: nodes[item],\n          exists: !!nodes[item],\n        };\n      }\n\n      if (typeof item === 'object' && !mergedConfig.idOnly) {\n        const node = adaptLegacyNode(item, store.resolver);\n        return {\n          node,\n          exists: !!nodes[node.id],\n        };\n      }\n\n      return {\n        node: null,\n        exists: false,\n      };\n    });\n\n  if (mergedConfig.existOnly) {\n    invariant(\n      nodeSelectors.filter((selector) => !selector.exists).length === 0,\n      ERROR_INVALID_NODEID\n    );\n  }\n\n  return nodeSelectors;\n};\n"]}