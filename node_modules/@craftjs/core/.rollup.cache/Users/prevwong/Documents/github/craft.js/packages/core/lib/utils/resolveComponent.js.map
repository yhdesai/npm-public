{"version":3,"file":"resolveComponent.js","sourceRoot":"","sources":["../../src/utils/resolveComponent.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,QAAkB,EAClB,IAAgC,EAChC,EAAE;IACF,IAAI,IAAY,CAAC;IACjB,MAAM,IAAI,GAAI,IAAY,CAAC,IAAI,IAAK,IAAY,CAAC,WAAW,CAAC;IAE7D,IAAI,QAAQ,CAAC,IAAI,CAAC;QAAE,OAAO,IAAI,CAAC;IAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EACnC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,EAAE,KAAK,IAAI,EAAE;YACf,IAAI,GAAG,IAAI,CAAC;YACZ,OAAO,IAAI,CAAC;SACb;KACF;IAED,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;AAC5C,CAAC,CAAC","sourcesContent":["import { Resolver } from '../interfaces';\n\nexport const resolveComponent = (\n  resolver: Resolver,\n  comp: React.ElementType | string\n) => {\n  let Comp: string;\n  const name = (comp as any).name || (comp as any).displayName;\n\n  if (resolver[name]) return name;\n\n  for (let i = 0; i < Object.keys(resolver).length; i++) {\n    const name = Object.keys(resolver)[i],\n      fn = resolver[name];\n    if (fn === comp) {\n      Comp = name;\n      return Comp;\n    }\n  }\n\n  if (typeof comp === 'string') return comp;\n};\n"]}