{"version":3,"file":"isEventBlockedByDescendant.js","sourceRoot":"","sources":["../../src/EventHandlers/isEventBlockedByDescendant.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CACxC,CAAwC,EACxC,SAAY,EACZ,EAAe;IAEf,kCAAkC;IAClC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE;QACZ,CAAC,CAAC,KAAK,GAAG;YACR,eAAe,EAAE,GAAG,EAAE,GAAE,CAAC;YACzB,aAAa,EAAE,EAAE;SAClB,CAAC;KACH;IAED,MAAM,gBAAgB,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;IAE7E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAChD,MAAM,eAAe,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAE5C,IAAI,EAAE,KAAK,eAAe,IAAI,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;YAC1D,OAAO,IAAI,CAAC;SACb;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { CraftDOMEvent } from './interfaces';\n\n/**\n * Check if a specified event is blocked by a child\n * that's a descendant of the specified element\n */\nexport function isEventBlockedByDescendant<K extends keyof HTMLElementEventMap>(\n  e: CraftDOMEvent<HTMLElementEventMap[K]>,\n  eventName: K,\n  el: HTMLElement\n) {\n  // Store initial Craft event value\n  if (!e.craft) {\n    e.craft = {\n      stopPropagation: () => {},\n      blockedEvents: {},\n    };\n  }\n\n  const blockingElements = (e.craft && e.craft.blockedEvents[eventName]) || [];\n\n  for (let i = 0; i < blockingElements.length; i++) {\n    const blockingElement = blockingElements[i];\n\n    if (el !== blockingElement && el.contains(blockingElement)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]}