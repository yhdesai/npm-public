{"version":3,"file":"wrapConnectorHooks.js","sourceRoot":"","sources":["../../src/EventHandlers/wrapConnectorHooks.tsx"],"names":[],"mappings":"AAAA,yCAAyC;AACzC,OAAO,EAAE,cAAc,EAAgB,MAAM,OAAO,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,OAAO,CAAC;AACrC,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAIvC,SAAS,MAAM,CAAC,GAAQ,EAAE,IAAS;IACjC,IAAI,IAAI,EAAE;QACR,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;YAC7B,GAAG,CAAC,IAAI,CAAC,CAAC;SACX;aAAM;YACL,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;SACpB;KACF;AACH,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,OAAY,EACZ,MAAW;IAEX,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC;IAChC,SAAS,CACP,OAAO,WAAW,KAAK,QAAQ,EAC/B,4DAA4D;QAC1D,sFAAsF;QACtF,kGAAkG,CACrG,CAAC;IAEF,IAAI,CAAC,WAAW,EAAE;QAChB,gEAAgE;QAChE,OAAO,YAAY,CAAC,OAAO,EAAE;YAC3B,GAAG,EAAE,MAAM;SACZ,CAAC,CAAC;KACJ;SAAM;QACL,OAAO,YAAY,CAAC,OAAO,EAAE;YAC3B,GAAG,EAAE,CAAC,IAAS,EAAE,EAAE;gBACjB,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAC1B,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACvB,CAAC;SACF,CAAC,CAAC;KACJ;AACH,CAAC;AAED,SAAS,gCAAgC,CAAC,OAAgC;IACxE,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;QACpC,OAAO;KACR;IAED,MAAM,IAAI,KAAK,EAAE,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,0BAA0B,CACxC,IAAyC;IAEzC,OAAO,CAAC,aAAa,GAAG,IAAI,EAAE,GAAG,IAAS,EAAE,EAAE;QAC5C,mDAAmD;QACnD,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;YAClC,IAAI,CAAC,aAAa,EAAE;gBAClB,OAAO;aACR;YAED,MAAM,IAAI,GAAG,aAAa,CAAC;YAC3B,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,wEAAwE;QACxE,0EAA0E;QAC1E,iCAAiC;QACjC,MAAM,OAAO,GAAwB,aAAa,CAAC;QACnD,gCAAgC,CAAC,OAAc,CAAC,CAAC;QAEjD,OAAO,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC;AACJ,CAAC;AAED,qCAAqC;AACrC,+EAA+E;AAC/E,MAAM,UAAU,kBAAkB,CAChC,UAAa;IAEb,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACnD,KAAK,CAAC,GAAG,CAAC,GAAG,0BAA0B,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE;YAClD,aAAa;YACb,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,EAAE,CAAQ,CAAC;AAChB,CAAC","sourcesContent":["// https://github.com/react-dnd/react-dnd\nimport { isValidElement, ReactElement } from 'react';\nimport { cloneElement } from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { ChainableConnectors, ConnectorsRecord } from './interfaces';\n\nfunction setRef(ref: any, node: any) {\n  if (node) {\n    if (typeof ref === 'function') {\n      ref(node);\n    } else {\n      ref.current = node;\n    }\n  }\n}\n\nexport function cloneWithRef(\n  element: any,\n  newRef: any\n): React.ReactElement<any> {\n  const previousRef = element.ref;\n  invariant(\n    typeof previousRef !== 'string',\n    'Cannot connect to an element with an existing string ref. ' +\n      'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +\n      'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute'\n  );\n\n  if (!previousRef) {\n    // When there is no ref on the element, use the new ref directly\n    return cloneElement(element, {\n      ref: newRef,\n    });\n  } else {\n    return cloneElement(element, {\n      ref: (node: any) => {\n        setRef(previousRef, node);\n        setRef(newRef, node);\n      },\n    });\n  }\n}\n\nfunction throwIfCompositeComponentElement(element: React.ReactElement<any>) {\n  if (typeof element.type === 'string') {\n    return;\n  }\n\n  throw new Error();\n}\n\nexport function wrapHookToRecognizeElement(\n  hook: (node: any, ...args: any[]) => void\n) {\n  return (elementOrNode = null, ...args: any) => {\n    // When passed a node, call the hook straight away.\n    if (!isValidElement(elementOrNode)) {\n      if (!elementOrNode) {\n        return;\n      }\n\n      const node = elementOrNode;\n      node && hook(node, ...args);\n      return node;\n    }\n\n    // If passed a ReactElement, clone it and attach this function as a ref.\n    // This helps us achieve a neat API where user doesn't even know that refs\n    // are being used under the hood.\n    const element: ReactElement | null = elementOrNode;\n    throwIfCompositeComponentElement(element as any);\n\n    return cloneWithRef(element, hook);\n  };\n}\n\n// A React wrapper for our connectors\n// Wrap all our connectors so that would additionally accept React.ReactElement\nexport function wrapConnectorHooks<H extends ConnectorsRecord>(\n  connectors: H\n): ChainableConnectors<H, React.ReactElement | HTMLElement> {\n  return Object.keys(connectors).reduce((accum, key) => {\n    accum[key] = wrapHookToRecognizeElement((...args) => {\n      // @ts-ignore\n      return connectors[key](...args);\n    });\n\n    return accum;\n  }, {}) as any;\n}\n"]}