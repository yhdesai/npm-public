{"version":3,"file":"DerivedEventHandlers.js","sourceRoot":"","sources":["../../src/EventHandlers/DerivedEventHandlers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAA0B,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAE3E,uEAAuE;AACvE,oGAAoG;AACpG,MAAM,OAAgB,oBAGpB,SAAQ,aAAa;IAKrB,YAAY,OAAU,EAAE,OAAW;QACjC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,gEAAgE;QAChE,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YAClE,QAAQ,GAAG,EAAE;gBACX,KAAK,mBAAmB,CAAC,cAAc,CAAC,CAAC;oBACvC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;iBACtB;gBACD,KAAK,mBAAmB,CAAC,eAAe,CAAC,CAAC;oBACxC,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;iBACvB;gBACD,OAAO,CAAC,CAAC;oBACP,OAAO;iBACR;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+CAA+C;IAC/C,OAAO,CAAC,EAAmD;QACzD,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACpD,CAAC;IAED,OAAO;QACL,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,gCAAgC,EAAE,CAAC;IAC1C,CAAC;CACF","sourcesContent":["import { EventHandlers } from './EventHandlers';\nimport { EventHandlerConnectors, EventHandlerUpdates } from './interfaces';\n\n// Creates EventHandlers that depends on another EventHandlers instance\n// This lets us to easily create new connectors that composites of the parent EventHandlers instance\nexport abstract class DerivedEventHandlers<\n  P extends EventHandlers,\n  O extends Record<string, any> = {}\n> extends EventHandlers {\n  derived: P;\n  options: O;\n  unsubscribeParentHandlerListener: () => void;\n\n  constructor(derived: P, options?: O) {\n    super(options);\n    this.derived = derived;\n    this.options = options;\n\n    // Automatically disable/enable depending on the parent handlers\n    this.unsubscribeParentHandlerListener = this.derived.listen((msg) => {\n      switch (msg) {\n        case EventHandlerUpdates.HandlerEnabled: {\n          return this.enable();\n        }\n        case EventHandlerUpdates.HandlerDisabled: {\n          return this.disable();\n        }\n        default: {\n          return;\n        }\n      }\n    });\n  }\n\n  // A method to easily inherit parent connectors\n  inherit(cb: (connectors: EventHandlerConnectors<P>) => void) {\n    return this.createProxyHandlers(this.derived, cb);\n  }\n\n  cleanup() {\n    super.cleanup();\n    this.unsubscribeParentHandlerListener();\n  }\n}\n"]}