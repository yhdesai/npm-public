{"version":3,"file":"ConnectorRegistry.js","sourceRoot":"","sources":["../../src/EventHandlers/ConnectorRegistry.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,cAAc,CAAC;AACnC,OAAO,OAAO,MAAM,SAAS,CAAC;AAiB9B;;;GAGG;AACH,MAAM,OAAO,iBAAiB;IAA9B;QACU,iBAAY,GAAiC,IAAI,OAAO,EAAE,CAAC;QAC3D,aAAQ,GAAqC,IAAI,GAAG,EAAE,CAAC;IA+EjE,CAAC;IA7ES,YAAY,CAAC,OAAoB;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,UAAU,EAAE;YACd,OAAO,UAAU,CAAC;SACnB;QAED,MAAM,KAAK,GAAG,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,cAAc,CAAC,OAAoB,EAAE,aAAqB;QAChE,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,GAAG,aAAa,KAAK,SAAS,EAAE,CAAC;IAC1C,CAAC;IAED,QAAQ,CAAC,OAAoB,EAAE,UAA+B;QAC5D,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE;YACtC,IACE,OAAO,CACL,UAAU,CAAC,QAAQ,EACnB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,CAC5C,EACD;gBACA,OAAO;aACR;YAED,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;SAC9C;QAED,IAAI,OAAO,GAAsB,IAAI,CAAC;QAEtC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE;YAC/D,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,MAAM,EAAE,GAAG,EAAE;gBACX,IAAI,OAAO,EAAE;oBACX,OAAO,EAAE,CAAC;iBACX;gBAED,OAAO,GAAG,UAAU,CAAC,SAAS,CAC5B,OAAO,EACP,UAAU,CAAC,QAAQ,EACnB,UAAU,CAAC,OAAO,CACnB,CAAC;YACJ,CAAC;YACD,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,CAAC,OAAO,EAAE;oBACZ,OAAO;iBACR;gBAED,OAAO,EAAE,CAAC;YACZ,CAAC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5E,CAAC;IAED,GAAG,CAAC,OAAoB,EAAE,IAAY;QACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACnC,UAAU,CAAC,MAAM,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACnC,UAAU,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;CACF","sourcesContent":["import isEqual from 'shallowequal';\nimport shortid from 'shortid';\n\nimport { Connector } from './interfaces';\n\ntype ConnectorToRegister = {\n  name: string;\n  required: any;\n  options?: Record<string, any>;\n  connector: Connector;\n};\n\ntype RegisteredConnector = {\n  required: any;\n  enable: () => void;\n  disable: () => void;\n};\n\n/**\n * Stores all connected DOM elements and their connectors here\n * This allows us to easily enable/disable and perform cleanups\n */\nexport class ConnectorRegistry {\n  private elementIdMap: WeakMap<HTMLElement, string> = new WeakMap();\n  private registry: Map<String, RegisteredConnector> = new Map();\n\n  private getElementId(element: HTMLElement) {\n    const existingId = this.elementIdMap.get(element);\n    if (existingId) {\n      return existingId;\n    }\n\n    const newId = shortid();\n    this.elementIdMap.set(element, newId);\n    return newId;\n  }\n\n  private getConnectorId(element: HTMLElement, connectorName: string) {\n    const elementId = this.getElementId(element);\n    return `${connectorName}--${elementId}`;\n  }\n\n  register(element: HTMLElement, toRegister: ConnectorToRegister) {\n    if (this.get(element, toRegister.name)) {\n      if (\n        isEqual(\n          toRegister.required,\n          this.get(element, toRegister.name).required\n        )\n      ) {\n        return;\n      }\n\n      this.get(element, toRegister.name).disable();\n    }\n\n    let cleanup: () => void | null = null;\n\n    this.registry.set(this.getConnectorId(element, toRegister.name), {\n      required: toRegister.required,\n      enable: () => {\n        if (cleanup) {\n          cleanup();\n        }\n\n        cleanup = toRegister.connector(\n          element,\n          toRegister.required,\n          toRegister.options\n        );\n      },\n      disable: () => {\n        if (!cleanup) {\n          return;\n        }\n\n        cleanup();\n      },\n    });\n\n    this.registry.get(this.getConnectorId(element, toRegister.name)).enable();\n  }\n\n  get(element: HTMLElement, name: string) {\n    return this.registry.get(this.getConnectorId(element, name));\n  }\n\n  enable() {\n    this.registry.forEach((connectors) => {\n      connectors.enable();\n    });\n  }\n\n  disable() {\n    this.registry.forEach((connectors) => {\n      connectors.disable();\n    });\n  }\n\n  clear() {\n    this.elementIdMap = new WeakMap();\n    this.registry.clear();\n  }\n}\n"]}