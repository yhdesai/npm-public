{"version":3,"file":"Store.js","sourceRoot":"","sources":["../../src/Store/Store.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,WAAW,EACX,WAAW,EAEX,YAAY,EACZ,aAAa,GACd,MAAM,OAAO,CAAC;AACf,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAErC,YAAY,EAAE,CAAC;AACf,aAAa,EAAE,CAAC;AAEhB,gDAAgD;AAChD,MAAM,OAAO,KAAK;IAIhB,YAAY,YAAe;QAHnB,gBAAW,GAA4B,IAAI,GAAG,EAAE,CAAC;QAIvD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC;IAC5B,CAAC;IAED,SAAS,CACP,SAA0B,EAC1B,QAAgC,EAChC,OAAgB,KAAK;QAErB,IAAI,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzC,IAAI,aAAa,GAAG,KAAK,CAAC;QAE1B,MAAM,UAAU,GAAG,CAAC,KAAQ,EAAE,EAAE;YAC7B,MAAc,CAAC,KAAK,GAAG,KAAK,CAAC;YAC9B,IAAI,aAAa,EAAE;gBACjB,OAAO;aACR;YAED,MAAM,kBAAkB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,EAAE;gBACxC,OAAO;aACR;YAED,OAAO,GAAG,kBAAkB,CAAC;YAC7B,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpB,CAAC,CAAC;QAEF,IAAI,IAAI,EAAE;YACR,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEjC,OAAO,GAAG,EAAE;YACV,aAAa,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,QAAQ,CACN,MAA0B,EAC1B,OAEK,EAAE;QAEP,MAAM,EAAE,OAAO,EAAE,GAAG;YAClB,OAAO,EAAE,IAAI;YACb,GAAG,IAAI;SACR,CAAC;QAEF,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,KAAU,CAAC,CAAC;QAEnB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,EAAE,OAAO,CAAM,CAAC;QAE9C,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC;CACF","sourcesContent":["import {\n  createDraft,\n  finishDraft,\n  Patch,\n  enableMapSet,\n  enablePatches,\n} from 'immer';\nimport isEqual from 'lodash/isEqual';\n\nenableMapSet();\nenablePatches();\n\n// A Generic Store class to hold stateful values\nexport class Store<S = any> {\n  private subscribers: Set<(state: S) => void> = new Set();\n  private state: S;\n\n  constructor(initialState: S) {\n    this.state = initialState;\n  }\n\n  subscribe<C>(\n    collector: (state: S) => C,\n    onChange: (collected: C) => void,\n    init: boolean = false\n  ) {\n    let current = collector(this.getState());\n    let isInvalidated = false;\n\n    const subscriber = (state: S) => {\n      (window as any).state = state;\n      if (isInvalidated) {\n        return;\n      }\n\n      const newCollectedValues = collector(state);\n      if (isEqual(newCollectedValues, current)) {\n        return;\n      }\n\n      current = newCollectedValues;\n      onChange(current);\n    };\n\n    if (init) {\n      subscriber(this.getState());\n    }\n\n    this.subscribers.add(subscriber);\n\n    return () => {\n      isInvalidated = true;\n      this.subscribers.delete(subscriber);\n    };\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  setState(\n    setter: (state: S) => void,\n    opts: Partial<{\n      onPatch: (patches: Patch[], inversePatches: Patch[]) => void;\n    }> = {}\n  ) {\n    const { onPatch } = {\n      onPatch: null,\n      ...opts,\n    };\n\n    const draft = createDraft(this.state);\n    setter(draft as S);\n\n    this.state = finishDraft(draft, onPatch) as S;\n\n    this.notify();\n  }\n\n  private notify() {\n    this.subscribers.forEach((subscriber) => subscriber(this.getState()));\n  }\n}\n\nexport type StateForStore<S extends Store> = S extends Store<infer I>\n  ? I\n  : never;\n"]}